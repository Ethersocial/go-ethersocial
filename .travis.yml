language: go
go_import_path: github.com/ethersocial/go-ethersocial
sudo: false
jobs:
  allow_failures:
    - stage: build
      os: osx
      go: 1.14.x
      env:
        - azure-osx
        - azure-ios
        - cocoapods-ios

  include:
    # This builder only tests code linters on latest version of Go
    - stage: lint
      os: linux
      dist: xenial
      go: 1.14.x
      env:
        - lint
      git:
        submodules: false # avoid cloning ethereum/tests
      script:
        - go run build/ci.go lint

    - stage: build
      os: linux
      dist: xenial
      go: 1.11.x
      env:
        - GO111MODULE=on
      script:
        - go run build/ci.go install
        - go run build/ci.go test -coverage $TEST_PACKAGES

    - stage: build
      os: linux
      dist: xenial
      go: 1.12.x
      env:
        - GO111MODULE=on
      script:
        - go run build/ci.go install
        - go run build/ci.go test -coverage $TEST_PACKAGES

    - stage: build
      os: linux
      dist: xenial
      go: 1.13.x
      env:
        - GO111MODULE=on
      script:
        - go run build/ci.go install
        - go run build/ci.go test -coverage $TEST_PACKAGES

    # These are the latest Go versions.
    - stage: build
      os: linux
      arch: amd64
      dist: xenial
      go: 1.14.x
      env:
        - GO111MODULE=on
      script:
        - go run build/ci.go install
        - go run build/ci.go test -coverage $TEST_PACKAGES

    - stage: build
      if: type = pull_request
      os: linux
      arch: arm64
      dist: xenial
      go: 1.14.x
      env:
        - GO111MODULE=on
      script:
        - go run build/ci.go install
        - go run build/ci.go test -coverage $TEST_PACKAGES

    - stage: build
      os: osx
      osx_image: xcode11.3
      go: 1.14.x
      env:
        - GO111MODULE=on
      script:
        - echo "Increase the maximum number of open file descriptors on macOS"
        - NOFILE=20480
        - sudo sysctl -w kern.maxfiles=$NOFILE
        - sudo sysctl -w kern.maxfilesperproc=$NOFILE
        - sudo launchctl limit maxfiles $NOFILE $NOFILE
        - sudo launchctl limit maxfiles
        - ulimit -S -n $NOFILE
        - ulimit -n
        - unset -f cd # workaround for https://github.com/travis-ci/travis-ci/issues/8703
        - go run build/ci.go install
        - go run build/ci.go test -coverage $TEST_PACKAGES

    # This builder does the Linux Azure uploads
    - stage: build
      if: type = push
      os: linux
      dist: xenial
      sudo: required
      go: 1.14.x
      env:
        - azure-linux
        - GO111MODULE=on
      git:
        submodules: false # avoid cloning ethereum/tests
      addons:
        apt:
          packages:
            - gcc-multilib
      script:
        # Build for the primary platforms that Trusty can manage
        - go run build/ci.go install
        - go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds
        - go run build/ci.go install -arch 386
        - go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds

        # Switch over GCC to cross compilation (breaks 386, hence why do it here only)
        - sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross
        - sudo ln -s /usr/include/asm-generic /usr/include/asm

        - GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc
        - GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds
        - GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc
        - GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds
        - GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc
        - GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds
        - go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc
        - go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds
        - mkdir -p package
        - if [ $(ls *-*.gz 2> /dev/null |wc -l) != 0 ]; then mv *-*.tar.gz package; fi

    # This builder does the Linux Azure MIPS xgo uploads
    - stage: build
      if: type = push
      os: linux
      dist: xenial
      services:
        - docker
      go: 1.14.x
      env:
        - azure-linux-mips
        - GO111MODULE=on
      git:
        submodules: false # avoid cloning ethereum/tests
      script:
        - go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags "-static"' -v
        - for bin in build/bin/*-linux-mips; do mv -f "${bin}" "${bin/-linux-mips/}"; done
        - go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds

        - go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags "-static"' -v
        - for bin in build/bin/*-linux-mipsle; do mv -f "${bin}" "${bin/-linux-mipsle/}"; done
        - go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds

        - go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags "-static"' -v
        - for bin in build/bin/*-linux-mips64; do mv -f "${bin}" "${bin/-linux-mips64/}"; done
        - go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds

        - go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags "-static"' -v
        - for bin in build/bin/*-linux-mips64le; do mv -f "${bin}" "${bin/-linux-mips64le/}"; done
        - go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds

        - mkdir -p package
        - if [ $(ls *-*.gz 2> /dev/null |wc -l) != 0 ]; then mv *-*.tar.gz package; fi

    # This builder does the Android Maven and Azure uploads
    - stage: build
      if: type = push
      os: linux
      dist: xenial
      addons:
        apt:
          packages:
            - oracle-java8-installer
            - oracle-java8-set-default
      language: android
      android:
        components:
          - platform-tools
          - tools
          - android-15
          - android-19
          - android-24
      env:
        - azure-android
        - maven-android
        - GO111MODULE=on
      git:
        submodules: false # avoid cloning ethereum/tests
      before_install:
        - curl https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz | tar -xz
        - export PATH=`pwd`/go/bin:$PATH
        - export GOROOT=`pwd`/go
        - export GOPATH=$HOME/go
      script:
        # Build the Android archive and upload it to Maven Central and Azure
        - curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip
        - unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip
        - mv android-ndk-r19b $ANDROID_HOME/ndk-bundle

        - mkdir -p $GOPATH/src/github.com/ethersocial
        - ln -s `pwd` $GOPATH/src/github.com/ethersocial/go-ethersocial
        - go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds
        - mkdir -p package
        - if [ $(ls *-*.gz 2> /dev/null |wc -l) != 0 ]; then mv *-*.tar.gz package; fi

    # This builder does the OSX Azure, iOS CocoaPods and iOS Azure uploads
    - stage: build
      if: type = push
      os: osx
      go: 1.14.x
      env:
        - azure-osx
        - azure-ios
        - cocoapods-ios
        - GO111MODULE=on
      git:
        submodules: false # avoid cloning ethereum/tests
      script:
        - go run build/ci.go install
        - go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds

        # Build the iOS framework and upload it to CocoaPods and Azure
        - gem uninstall cocoapods -a -x
        - gem install cocoapods

        - mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak
        - sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb
        - if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi

        - xctool -version
        - xcrun simctl list

        # Workaround for https://github.com/golang/go/issues/23749
        ##- export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'
        ##- go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds

        - mkdir -p package
        - if [ $(ls *-*.gz 2> /dev/null |wc -l) != 0 ]; then mv *-*.tar.gz package; fi

    # This builder does the Azure archive purges to avoid accumulating junk
    - stage: build
      if: type = cron
      os: linux
      dist: xenial
      go: 1.14.x
      env:
        - azure-purge
        - GO111MODULE=on
      git:
        submodules: false # avoid cloning ethereum/tests
      script:
        - go run build/ci.go purge -store gethstore/builds -days 14

deploy:
  - provider: releases
    api_key:
      secure: "LV+5+6KZlwZN+l0/kyXJr1ZcJUhqCdCmlr7KGhE3J30gX/y5xraGoTUlORdKKOpJdjrP8Mh4sTGNhq0cpm4FO1We/N/vy4JP9x4/BE0yVupXMtfgrKlQw6pNJXL/EzscBT+rwkvzDCk7+glyrNfgNK8Jcue9SKEG20NI1RofdLfOTMMj6+gHSKrQ3qMydUGVFFhE+YMy7Amffs9WMkg48Od/GWtX8flFFIhclC809JafgPA0W4c7ATSlkoHEzDAiTE7x4uZWQ0Bn5tQxoLh0PqxhEUsW3GBuh3M3GpgiJoOZinocJxZyOJ4eCYYsAqtQMxrbQoklD6RepxaZ9bVMhIGvNXDMbr/uWx+eVxmEvLMpJgmMBPBZytcOgC/MgfYJDlTqOmz+q7O318JgmCOmbXn6v9rhw7ng6R/jPnGOlhmgsVM+/NKH4bI8jCPAvqstTU8jiI16QyZnmo7/H3RK2sKfsP0B8I3Uh77Gbt+d/T951ogqFOj/7lmLgmchescEVeA25KfslepM9zBOF6Q0yxJr5eGXQqbFuoL9QP4UaVw5285sFnWgBTCitgqa48wtO/bjDXCDThAVugTSnmnMmtrlHYi2eZNUx7Tz5v3Ejtsv97cQKQweW1sB1zwT7sa+RUIqpHbG0UZJICDovC+G1naof1GkZhzfd2cVulHSXwQ="
    file_glob: true
    file: package/*
    skip_cleanup: true
    on:
      tags: true
